/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/UI.js":
/*!*******************!*\
  !*** ./src/UI.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"changeToDoPages\": () => (/* binding */ changeToDoPages),\n/* harmony export */   \"menuToggle\": () => (/* binding */ menuToggle)\n/* harmony export */ });\n// All UI or animation related js\n\nfunction changeToDoPages() {\n  const mainAdd = document.querySelector('.main iconify-icon');\n\n  const pageName = document.querySelector('.main > p');\n\n  const options = document.querySelectorAll('div .option');\n\n  options.forEach(option => {\n    option.addEventListener('click', () => {\n      options.forEach(option => {\n        removeCurrent(option);\n      });\n\n      if (\n        option.classList.contains('today') ||\n        option.classList.contains('favorite')\n      ) {\n        pageName.style.marginBottom = '35px';\n        mainAdd.classList.add('disabled');\n      } else {\n        if (mainAdd.classList.contains('disabled')) {\n          pageName.style.marginBottom = '0px';\n          mainAdd.classList.remove('disabled');\n        }\n      }\n\n      pageName.textContent = option.querySelector('p').textContent;\n      addCurrent(option);\n    });\n  });\n\n  function addCurrent(el) {\n    el.classList.add('current');\n    return el;\n  }\n\n  function removeCurrent(el) {\n    el.classList.remove('current');\n  }\n}\n\nfunction menuToggle() {\n  const menuBtn = document.querySelector('.header-txt iconify-icon');\n  menuBtn.addEventListener('click', () => {\n    document.querySelector('.main').classList.toggle('toggle');\n    document.querySelector('.opt').classList.toggle('toggle');\n  });\n}\n\n\n//# sourceURL=webpack://todo-list/./src/UI.js?");

/***/ }),

/***/ "./src/functionality.js":
/*!******************************!*\
  !*** ./src/functionality.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"projectFunctionality\": () => (/* binding */ projectFunctionality),\n/* harmony export */   \"tasksFunctionality\": () => (/* binding */ tasksFunctionality)\n/* harmony export */ });\n/* harmony import */ var _getModal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getModal */ \"./src/getModal.js\");\n/* harmony import */ var _UI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UI */ \"./src/UI.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./task */ \"./src/task.js\");\n/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./project */ \"./src/project.js\");\n\n\n\n\n\n\n\n// Dont select text when double clicking\ndocument.addEventListener('mousedown', event => {\n  if (event.detail > 1) {\n    event.preventDefault();\n  }\n});\n\n// Tasks array\nlet ToDo = [];\n\nfunction tasksFunctionality() {\n  // Initialize onsubmit function\n  makeToDo();\n\n  // Default functions onload\n  window.addEventListener('load', () => {\n    getAllTasks();\n\n    const inboxOpt = document.querySelector('.icons .inbox');\n    const inboxProjectID = inboxOpt.id.substr(inboxOpt.id.indexOf('_'));\n\n    getProjectTasks(inboxProjectID);\n  });\n\n  function getAllTasks() {\n    LoopTasks(ToDo);\n  }\n\n  // Initialize projects onclick function\n  renderTasksOnClick();\n\n  // Change projects onclick function\n  function renderTasksOnClick() {\n    const opt = document.querySelector('.opt');\n\n    opt.addEventListener('click', e => {\n      e.stopPropagation();\n      if (e.target.closest('div .option[id*=\"projectCard_\"]')) {\n        if (window.screen.availWidth < 768) {\n          document.querySelector('.main').classList.toggle('toggle');\n          document.querySelector('.opt').classList.toggle('toggle');\n        }\n\n        getProjectTasks(\n          e.target\n            .closest('div')\n            .id.substr(e.target.closest('div').id.indexOf('_'))\n        );\n\n        removeCurrentSelection();\n        e.target.closest('div').classList.toggle('current');\n      }\n    });\n  }\n\n  // Remove current selection to prevent crash bug\n  function removeCurrentSelection() {\n    document.querySelector('.option.current')\n      ? document\n          .querySelector('.opt .option.current')\n          .classList.remove('current')\n      : undefined;\n  }\n\n  // Project id\n  function currentProjectSelected() {\n    const options = document.querySelectorAll('.option');\n    let currOpt;\n    options.forEach(option => {\n      if (option.classList.contains('current')) {\n        currOpt = option;\n      }\n    });\n    return currOpt.id.substr(currOpt.id.indexOf('_'));\n  }\n\n  // Get the tasks from the actual projects\n  function getProjectTasks(projectID) {\n    let target = project.filter(projct => projct.id === projectID);\n\n    const projectTasks = ToDo.filter(task =>\n      target[0]._projectTasks.includes(task.Id)\n    );\n\n    LoopTasks(projectTasks);\n  }\n\n  // Loop through each task from the current project\n  function LoopTasks(tasks) {\n    const tasksCont = document.querySelector('.tasks');\n    tasksCont.innerHTML = '';\n    tasks.forEach(obj => {\n      renderTask(obj);\n    });\n  }\n\n  // Call create task card function and append it to the main content\n  function renderTask(item) {\n    const tasksCont = document.querySelector('.tasks');\n    const taskCard = createToDo(item);\n    tasksCont.appendChild(taskCard);\n  }\n\n  // Create task object\n  function makeToDo() {\n    const taskForm = document.getElementById('modalCont');\n\n    const nameInput = document.getElementById('task-name');\n    const dueDateInput = document.getElementById('task-date');\n    const priorityInput = document.getElementById('task-priority');\n    const projectInput = document.getElementById('task-project');\n    const descInput = document.getElementById('task-description');\n\n    taskForm.addEventListener('submit', () => {\n      const currTask = new _task__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\n        nameInput.value,\n        dueDateInput.value,\n        priorityInput.value,\n        projectInput.value,\n        descInput.value\n      );\n\n      // Add task to allTasks array\n      ToDo.push(currTask);\n\n      // Call function to add task id to project\n      for (const obj of ToDo) {\n        addTaskToProject(obj);\n      }\n\n      if (currentProjectSelected()) {\n        getProjectTasks(currentProjectSelected());\n      }\n\n      // Set current project selected in modal\n      (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.TasksModal)().currProjectSelected();\n    });\n  }\n\n  // Create all of the tasks content\n  function createToDo(item) {\n    const taskContainer = document.createElement('div');\n    taskContainer.classList.add('task-container');\n\n    const newTask = document.createElement('div');\n    newTask.classList.add(`toDo`);\n    newTask.id = `toDo${item.Id}`;\n\n    // Show or hide information container\n    newTask.addEventListener('click', () => {\n      if (infoCont.classList.contains('active')) {\n        infoCont.classList.remove('active');\n        arrowDiv.classList.remove('active');\n      } else {\n        infoCont.classList.add('active');\n        arrowDiv.classList.add('active');\n      }\n    });\n\n    const left = document.createElement('div');\n    left.classList.add('left');\n\n    const check = document.createElement('div');\n    check.classList.add('check');\n\n    const checkActive = document.createElement('iconify-icon');\n    editIcon(checkActive, 'akar-icons:circle-check-fill', 20);\n    checkActive.style.color = '#4ecb71';\n\n    // Check or uncheck functionality\n    check.addEventListener('click', e => {\n      e.stopPropagation();\n      if (!check.hasChildNodes()) {\n        check.classList.add('active');\n        check.appendChild(checkActive);\n        toggleChecked();\n      } else {\n        check.classList.remove('active');\n        check.removeChild(checkActive);\n        toggleChecked();\n      }\n    });\n\n    function toggleChecked() {\n      item.checked = !item.checked;\n      getProjectTasks(currentProjectSelected());\n    }\n\n    const taskName = document.createElement('p');\n    taskName.textContent = item.name;\n\n    left.appendChild(check);\n    left.appendChild(taskName);\n\n    const right = document.createElement('div');\n    right.classList.add('right');\n\n    const iconOne = document.createElement('div');\n    iconOne.classList.add('iconone');\n\n    const edit = document.createElement('iconify-icon');\n    editIcon(edit, 'clarity:note-edit-line', 20);\n\n    // Edit icon onclick functionality and get current values for editModal\n    edit.addEventListener('click', e => {\n      e.stopPropagation();\n\n      const editTaskForm = document.getElementById('editCont');\n      editTaskForm.setAttribute('data-id', item.Id);\n\n      const nameInput = document.getElementById('edit-name');\n      const dueDateInput = document.getElementById('edit-date');\n      const priorityInput = document.getElementById('edit-priority');\n      const projectInput = document.getElementById('edit-project');\n      const descInput = document.getElementById('edit-description');\n\n      nameInput.value = item.name;\n      dueDateInput.value = item.dueDate;\n      priorityInput.value = item.priority;\n      projectInput.value = item.project;\n      descInput.value = item.description;\n\n      onEdit();\n    });\n\n    const iconTwo = document.createElement('div');\n    iconTwo.classList.add('icontwo');\n\n    const favorite = document.createElement('iconify-icon');\n    editIcon(favorite, 'bi:star', 20);\n\n    const favoriteActive = document.createElement('iconify-icon');\n    editIcon(favoriteActive, 'bi:star-fill', 20);\n    favoriteActive.classList.add('star');\n\n    // Favorite or unfavorite onclick\n    iconTwo.addEventListener('click', e => {\n      e.stopPropagation();\n      if (iconTwo.contains(favorite)) {\n        iconTwo.removeChild(favorite);\n        iconTwo.appendChild(favoriteActive);\n        toggleFavorite();\n      } else if (iconTwo.contains(favoriteActive)) {\n        iconTwo.removeChild(favoriteActive);\n        iconTwo.appendChild(favorite);\n        toggleFavorite();\n      }\n    });\n\n    function toggleFavorite() {\n      item.favorite = !item.favorite;\n      getProjectTasks(currentProjectSelected);\n    }\n\n    const priorityDiv = document.createElement('select');\n    priorityDiv.classList.add('priority');\n    priorityDiv.classList.add(`${item.priority}`);\n\n    const option1 = document.createElement('option');\n    option1.textContent = 'Low';\n    option1.value = 'low';\n\n    const option2 = document.createElement('option');\n    option2.textContent = 'Normal';\n    option2.value = 'normal';\n\n    const option3 = document.createElement('option');\n    option3.textContent = 'Important';\n    option3.value = 'important';\n\n    priorityDiv.appendChild(option1);\n    priorityDiv.appendChild(option2);\n    priorityDiv.appendChild(option3);\n\n    // Set default priority when tasks update\n    if (priorityDiv.classList.contains('low')) {\n      option1.setAttribute('selected', 'selected');\n    } else if (priorityDiv.classList.contains('normal')) {\n      option2.setAttribute('selected', 'selected');\n    } else if (priorityDiv.classList.contains('important')) {\n      option3.setAttribute('selected', 'selected');\n    }\n\n    // Priority onchange functionality\n    priorityDiv.addEventListener('click', e => {\n      e.stopPropagation();\n      priorityDiv.addEventListener('change', e => {\n        if (e.target.value === 'low') {\n          priorityDiv.classList.add('low');\n          priorityDiv.classList.remove('normal');\n          priorityDiv.classList.remove('important');\n          item.priority = 'low';\n        } else if (e.target.value === 'normal') {\n          priorityDiv.classList.add('normal');\n          priorityDiv.classList.remove('low');\n          priorityDiv.classList.remove('important');\n          item.priority = 'normal';\n        } else if (e.target.value === 'important') {\n          priorityDiv.classList.add('important');\n          priorityDiv.classList.remove('low');\n          priorityDiv.classList.remove('normal');\n          item.priority = 'important';\n        }\n\n        getProjectTasks(currentProjectSelected());\n      });\n    });\n\n    const iconThree = document.createElement('div');\n    iconThree.classList.add('iconthree');\n\n    const deleteBtn = document.createElement('iconify-icon');\n    editIcon(deleteBtn, 'clarity:trash-line', 20);\n    deleteBtn.classList.add('deleteToDo');\n\n    const infoCont = document.createElement('div');\n    infoCont.classList.add('information');\n    infoCont.id = `information${item.Id}`;\n\n    const dueDate = document.createElement('div');\n    dueDate.classList.add('due-date');\n\n    const dateTitle = document.createElement('p');\n    dateTitle.textContent = 'Due-date:';\n\n    const dateInfo = document.createElement('p');\n    dateInfo.textContent = `${item.dueDate}`;\n\n    const desc = document.createElement('div');\n    desc.classList.add('description');\n\n    const descTitle = document.createElement('p');\n    descTitle.textContent = 'Description:';\n\n    const descInfo = document.createElement('p');\n    descInfo.textContent = `${item.description}`;\n\n    infoCont.appendChild(dueDate);\n\n    dueDate.appendChild(dateTitle);\n    dueDate.appendChild(dateInfo);\n\n    infoCont.appendChild(desc);\n\n    desc.appendChild(descTitle);\n    desc.appendChild(descInfo);\n\n    right.appendChild(iconOne);\n    right.appendChild(iconTwo);\n    right.appendChild(priorityDiv);\n    right.appendChild(iconThree);\n\n    iconOne.appendChild(edit);\n    iconTwo.appendChild(favorite);\n    iconThree.appendChild(deleteBtn);\n\n    newTask.appendChild(left);\n    newTask.appendChild(right);\n\n    const arrowDiv = document.createElement('div');\n    arrowDiv.classList.add('arrow');\n\n    arrowDiv.addEventListener('click', () => {\n      arrowIcon.classList.toggle('active');\n    });\n\n    const arrowIcon = document.createElement('iconify-icon');\n    editIcon(arrowIcon, 'material-symbols:keyboard-arrow-down-rounded', 30);\n\n    taskContainer.appendChild(newTask);\n\n    newTask.appendChild(arrowDiv);\n    arrowDiv.appendChild(arrowIcon);\n\n    taskContainer.appendChild(infoCont);\n\n    // Delete tasks onclick functionality\n    deleteBtn.addEventListener('click', e => {\n      e.stopPropagation();\n      onDelete(item, infoCont);\n    });\n\n    // domHelper\n    function editIcon(el, attr, size) {\n      el.setAttribute('icon', `${attr}`);\n      el.setAttribute('width', `${size}`);\n      el.setAttribute('height', `${size}`);\n    }\n\n    // Get values of tasks (checked, favorite) on update\n    ifChecked(check, checkActive, item);\n    ifFavorite(favorite, favoriteActive, iconTwo, item);\n\n    // Return task container\n    return taskContainer;\n  }\n\n  // Add defined task id to project\n  function addTaskToProject(item) {\n    const taskProjectOpt = document.querySelectorAll('#task-project option');\n\n    let lastItem = ToDo[ToDo.length - 1];\n\n    taskProjectOpt.forEach(taskOption => {\n      if (taskOption.selected === true) {\n        project.forEach(projct => {\n          if (taskOption.dataset.id === projct.id) {\n            if (!projct._projectTasks.includes(lastItem)) {\n              if (lastItem === item) {\n                projct._projectTasks.push(item.Id);\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  function ifChecked(checkBtn, checkActive, item) {\n    if (item.checked === false) {\n      checkBtn.classList.remove('active');\n      if (checkBtn.hasChildNodes()) {\n        checkBtn.removeChild(checkActive);\n      }\n    } else if (item.checked === true) {\n      checkBtn.classList.add('active');\n      checkBtn.appendChild(checkActive);\n    }\n  }\n\n  function ifFavorite(favorite, favoriteActive, container, item) {\n    if (item.favorite === false) {\n      if (container.contains(favoriteActive)) {\n        container.removeChild(favoriteActive);\n      }\n      container.appendChild(favorite);\n    } else if (item.favorite === true) {\n      if (container.contains(favorite)) {\n        container.removeChild(favorite);\n      }\n      container.appendChild(favoriteActive);\n    }\n  }\n\n  function onDelete(itm, infoCont) {\n    const delYes = document.querySelector('.delYes');\n\n    let item = itm;\n    (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.WarningModal)().openWarningModal();\n\n    delYes.addEventListener('click', () => {\n      if (infoCont.classList.contains('active')) {\n        infoCont.classList.remove('active');\n      }\n      deleteTask(item);\n      (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.WarningModal)().closeWarningIfYes();\n    });\n  }\n\n  function onEdit() {\n    const editTaskForm = document.getElementById('editCont');\n\n    (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.TasksModal)().openEditTaskModal();\n\n    editTaskForm.addEventListener('submit', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      editTask();\n      (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.TasksModal)().closeOnEditTask();\n    });\n  }\n\n  function deleteTask(item) {\n    const targetNode = document.querySelector(`#toDo${item.Id}`);\n    targetNode.parentNode.removeChild(targetNode);\n\n    for (let i = 0; i < ToDo.length; i++) {\n      if (ToDo[i].Id === item.Id) {\n        // Delete from allTasks array\n        ToDo.splice(i, 1);\n        // Delete id from defined project\n        project.forEach(projct => {\n          if (projct._name === item.project) {\n            if (projct._projectTasks.includes(item.Id)) {\n              projct._projectTasks.splice(\n                projct._projectTasks.indexOf(item.Id),\n                1\n              );\n            }\n          }\n        });\n        break;\n      }\n    }\n  }\n\n  function editTask() {\n    const editTaskForm = document.getElementById('editCont');\n    const editID = editTaskForm.getAttribute('data-id');\n\n    const nameInput = document.getElementById('edit-name');\n    const dueDateInput = document.getElementById('edit-date');\n    const priorityInput = document.getElementById('edit-priority');\n    const projectInput = document.getElementById('edit-project');\n    const descInput = document.getElementById('edit-description');\n\n    ToDo.forEach(task => {\n      if (task.Id === editID) {\n        // Remove from current project\n        project.forEach(projct => {\n          if (projct.name === task.project) {\n            if (projct._projectTasks.includes(task.Id)) {\n              projct._projectTasks.splice(\n                projct._projectTasks.indexOf(task.Id),\n                1\n              );\n            }\n          }\n\n          const editProjectOpt = document.querySelectorAll(\n            '#edit-project option'\n          );\n\n          // Add to new project\n          editProjectOpt.forEach(editOption => {\n            if (editOption.selected === true) {\n              if (editOption.dataset.id === projct.id) {\n                if (!projct._projectTasks.includes(task.Id)) {\n                  projct._projectTasks.push(task.Id);\n                }\n              }\n            }\n          });\n        });\n        // Rename\n        task.name = nameInput.value;\n        task.dueDate = dueDateInput.value;\n        task.priority = priorityInput.value;\n        task.project = projectInput.value;\n        task.description = descInput.value;\n      }\n    });\n\n    // Update\n    getProjectTasks(currentProjectSelected());\n  }\n}\n\n// Projects array\nconst project = [\n  new _project__WEBPACK_IMPORTED_MODULE_3__[\"default\"]('inbox', true),\n  new _project__WEBPACK_IMPORTED_MODULE_3__[\"default\"]('today'),\n  new _project__WEBPACK_IMPORTED_MODULE_3__[\"default\"]('favorite'),\n];\n\nfunction projectFunctionality() {\n  makeProject();\n\n  // Loop through each project\n  function LoopProjects() {\n    const projectsCont = document.querySelector('.projects');\n    projectsCont.innerHTML = '';\n    project.forEach(projct => {\n      if (\n        projct.name != 'inbox' &&\n        projct.name != 'today' &&\n        projct.name != 'favorite'\n      ) {\n        createNewProject(projct);\n      }\n    });\n  }\n\n  // Create project object onsubmit\n  function makeProject() {\n    const projectForm = document.getElementById('projectCont');\n    const nameInput = document.getElementById('project-name');\n\n    projectForm.addEventListener('submit', e => {\n      e.preventDefault();\n      const newProject = new _project__WEBPACK_IMPORTED_MODULE_3__[\"default\"](nameInput.value);\n\n      project.push(newProject);\n\n      LoopProjects();\n    });\n  }\n\n  iterateOpt();\n\n  // Set current project selected true or false on modal (link projectCard to project object)\n  function iterateOpt() {\n    const options = document.querySelectorAll('.option');\n    options.forEach(option => {\n      option.addEventListener('click', () => {\n        let optionID = option.id.substr(option.id.indexOf('_'));\n        project.forEach(prjct => {\n          prjct._current = false;\n          if (optionID === prjct.id) {\n            prjct.current = true;\n          }\n        });\n      });\n    });\n  }\n\n  // Create project card\n  function createNewProject(item) {\n    const projectCont = document.querySelector('.projects');\n\n    const projectCard = document.createElement('div');\n    projectCard.classList.add('projectCard');\n    projectCard.classList.add('option');\n    projectCard.id = `projectCard${item.id}`;\n\n    const projectLine = document.createElement('hr');\n    projectLine.classList.add('project-line');\n\n    const projectName = document.createElement('p');\n    projectName.textContent = item.name;\n\n    const icons = document.createElement('div');\n    icons.classList.add('project-icons');\n\n    const editProject = document.createElement('iconify-icon');\n    editIcon(editProject, 'akar-icons:pencil', 22);\n\n    editProject.addEventListener('click', e => {\n      e.stopPropagation();\n      const editTaskForm = document.getElementById('projectEditCont');\n      editTaskForm.setAttribute('data-id', item.id);\n\n      const nameInput = document.getElementById('project-edit-name');\n\n      nameInput.value = item.name;\n\n      onEdit();\n    });\n\n    const deleteIcon = document.createElement('iconify-icon');\n    editIcon(deleteIcon, 'bx:trash-alt', 22);\n\n    // Delete button onclick\n    deleteIcon.addEventListener('click', e => {\n      e.stopPropagation();\n      onDelete(item);\n    });\n\n    // domHelper\n    function editIcon(el, attr, size) {\n      el.setAttribute('icon', `${attr}`);\n      el.setAttribute('width', `${size}`);\n      el.setAttribute('height', `${size}`);\n    }\n\n    icons.appendChild(editProject);\n    icons.appendChild(deleteIcon);\n\n    projectCard.appendChild(projectLine);\n    projectCard.appendChild(projectName);\n    projectCard.appendChild(icons);\n\n    projectCont.appendChild(projectCard);\n\n    const options = document.querySelectorAll('.option');\n\n    // Same as iterateOpt\n    options.forEach(option => {\n      option.addEventListener('click', () => {\n        let optionID = option.id.substr(option.id.indexOf('_'));\n        project.forEach(prjct => {\n          prjct._current = false;\n          if (optionID === prjct.id) {\n            prjct.current = true;\n          }\n        });\n      });\n    });\n\n    options.forEach(option => {\n      project.forEach(prjct => {\n        let optionID = option.id.substr(option.id.indexOf('_'));\n        if (prjct.current === true) {\n          if (prjct.id === optionID) {\n            if (!option.classList.contains('current')) {\n              option.classList.add('current');\n            }\n          }\n        }\n      });\n    });\n\n    (0,_UI__WEBPACK_IMPORTED_MODULE_1__.changeToDoPages)();\n    // Add new options in modals (add, edit)\n    newTaskProject();\n    newTaskEditProject();\n  }\n\n  function onDelete(itm) {\n    const delYes = document.querySelector('.delYes');\n\n    let item = itm;\n    (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.WarningModal)().openWarningModal();\n\n    delYes.addEventListener('click', () => {\n      deleteProject(item);\n      (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.WarningModal)().closeWarningIfYes();\n    });\n  }\n\n  function onEdit() {\n    const editProjectForm = document.getElementById('projectEditCont');\n\n    (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.ProjectsModal)().openEditProjectModal();\n\n    editProjectForm.addEventListener('submit', e => {\n      e.preventDefault();\n      editProject();\n      (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.ProjectsModal)().closeOnEditProject();\n    });\n\n    newTaskProject();\n    newTaskEditProject();\n  }\n\n  function deleteProject(item) {\n    const targetNode = document.querySelector(`#projectCard${item.id}`);\n    targetNode.parentNode.removeChild(targetNode);\n\n    for (let i = 0; i < project.length; i++) {\n      if (project[i].id === item.id) {\n        // Remove from array\n        project.splice(i, 1);\n        break;\n      }\n    }\n\n    // Delete old options in modals (add, edit)\n    newTaskProject();\n    newTaskEditProject();\n  }\n\n  function editProject() {\n    const editProjectForm = document.getElementById('projectEditCont');\n    const editID = editProjectForm.getAttribute('data-id');\n\n    const pageName = document.querySelector('.main p');\n\n    const options = document.querySelectorAll('.option');\n\n    const nameInput = document.getElementById('project-edit-name');\n\n    project.forEach(projct => {\n      if (projct.id === editID) {\n        options.forEach(option => {\n          const p = option.querySelector('p').textContent;\n          if (p === projct.name) {\n            if (option.classList.contains('current')) {\n              pageName.textContent = nameInput.value;\n            }\n          }\n        });\n        projct.name = nameInput.value;\n      }\n    });\n\n    LoopProjects();\n  }\n\n  newTaskProject();\n\n  function newTaskProject() {\n    const taskProject = document.getElementById('task-project');\n\n    taskProject.innerHTML = '';\n\n    project.forEach(projct => {\n      if (projct.name != 'today' && projct.name != 'favorite') {\n        const option = document.createElement('option');\n        if (projct.name === 'inbox') {\n          option.textContent = 'None';\n          option.value = projct.name;\n        } else {\n          option.textContent = projct.name;\n          option.value = projct.name;\n        }\n\n        option.setAttribute('data-id', projct.id);\n\n        taskProject.append(option);\n        (0,_getModal__WEBPACK_IMPORTED_MODULE_0__.TasksModal)().currProjectSelected();\n      }\n    });\n  }\n\n  defaultID();\n\n  // Add default id to project on load\n  function defaultID() {\n    project.forEach(projct => {\n      const inboxOpt = document.querySelector('.inbox');\n      const todayOpt = document.querySelector('.today');\n      const favoriteOpt = document.querySelector('.favorite');\n\n      if (projct.name === 'inbox') {\n        inboxOpt.id = `projectCard${projct.id}`;\n      } else if (projct.name === 'today') {\n        todayOpt.id = `projectCard${projct.id}`;\n      } else if (projct.name === 'favorite') {\n        favoriteOpt.id = `projectCard${projct.id}`;\n      }\n    });\n  }\n\n  newTaskEditProject();\n\n  function newTaskEditProject() {\n    const editProject = document.getElementById('edit-project');\n\n    editProject.innerHTML = '';\n\n    project.forEach(projct => {\n      if (projct.name != 'today' && projct.name != 'favorite') {\n        const option = document.createElement('option');\n        if (projct.name === 'inbox') {\n          option.textContent = 'None';\n          option.value = projct.name;\n        } else {\n          option.textContent = projct.name;\n          option.value = projct.name;\n        }\n        option.setAttribute('data-id', projct.id);\n\n        editProject.append(option);\n      }\n    });\n  }\n}\n\n\n//# sourceURL=webpack://todo-list/./src/functionality.js?");

/***/ }),

/***/ "./src/getModal.js":
/*!*************************!*\
  !*** ./src/getModal.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProjectsModal\": () => (/* binding */ ProjectsModal),\n/* harmony export */   \"TasksModal\": () => (/* binding */ TasksModal),\n/* harmony export */   \"WarningModal\": () => (/* binding */ WarningModal)\n/* harmony export */ });\n// All stuff related with modals\n\nfunction TasksModal() {\n  const taskForm = document.getElementById('modalCont');\n  const taskModal = document.querySelector('.task-modal');\n\n  openTasksModal();\n  closeTasksModal();\n  closeEditTaskModal();\n  manageOnSubmit(taskForm, taskModal);\n  minDate();\n\n  const options = document.querySelectorAll('div .option');\n  const taskProjectOpt = document.querySelectorAll('#task-project option');\n\n  function currProjectSelected() {\n    options.forEach(option => {\n      if (option.classList.contains('current')) {\n        let optionID = option.id.substr(option.id.indexOf('_'));\n        taskProjectOpt.forEach(task => {\n          if (optionID === task.dataset.id) {\n            task.selected = true;\n          }\n        });\n      }\n    });\n  }\n\n  function openTasksModal() {\n    const mainAdd = document.querySelector('.main iconify-icon');\n\n    mainAdd.addEventListener('click', () => {\n      taskModal.classList.add('active');\n      manageOverlay().openOverlay();\n      currProjectSelected();\n    });\n  }\n\n  function openEditTaskModal() {\n    const editTaskModal = document.querySelector('.task-edit');\n    editTaskModal.classList.add('active');\n    manageOverlay().openOverlay();\n  }\n\n  function closeTasksModal() {\n    const taskModal = document.querySelector('.task-modal');\n    manageOverlay().closeOverlay(taskModal);\n  }\n\n  function closeOnEditTask() {\n    const editTaskModal = document.querySelector('.task-edit');\n    const overlay = document.querySelector('.overlay');\n\n    editTaskModal.classList.remove('active');\n\n    setTimeout(() => {\n      overlay.classList.add('fade');\n      overlay.addEventListener('animationend', () => {\n        overlay.classList.remove('active');\n      });\n    }, 200);\n  }\n\n  function closeEditTaskModal() {\n    const editTaskModal = document.querySelector('.task-edit');\n    manageOverlay().closeOverlay(editTaskModal);\n  }\n\n  return { openEditTaskModal, closeOnEditTask, currProjectSelected };\n}\n\nfunction ProjectsModal() {\n  const projectForm = document.getElementById('projectCont');\n  const projectModal = document.querySelector('.project-modal');\n\n  openProjectsModal();\n  closeProjectsModal();\n  closeEditProjectModal();\n  manageOnSubmit(projectForm, projectModal);\n\n  TasksModal().currProjectSelected();\n\n  function openProjectsModal() {\n    const addProject = document.querySelector('.projects-header iconify-icon');\n    const projectModal = document.querySelector('.project-modal');\n\n    addProject.addEventListener('click', () => {\n      projectModal.classList.add('active');\n      manageOverlay().openOverlay();\n    });\n  }\n\n  function openEditProjectModal() {\n    const editProjectModal = document.querySelector('.project-edit');\n    editProjectModal.classList.add('active');\n    manageOverlay().openOverlay();\n  }\n\n  function closeProjectsModal() {\n    const projectModal = document.querySelector('.project-modal');\n    manageOverlay().closeOverlay(projectModal);\n  }\n\n  function closeOnEditProject() {\n    const editProjectModal = document.querySelector('.project-edit');\n    const overlay = document.querySelector('.overlay');\n\n    editProjectModal.classList.remove('active');\n\n    setTimeout(() => {\n      overlay.classList.add('fade');\n      overlay.addEventListener('animationend', () => {\n        overlay.classList.remove('active');\n      });\n    }, 200);\n  }\n\n  function closeEditProjectModal() {\n    const editProjectModal = document.querySelector('.project-edit');\n    manageOverlay().closeOverlay(editProjectModal);\n  }\n\n  return { openEditProjectModal, closeOnEditProject };\n}\n\nfunction manageOnSubmit(form, modal) {\n  const overlay = document.querySelector('.overlay');\n\n  form.addEventListener('submit', e => {\n    e.preventDefault();\n    modal.classList.remove('active');\n    setTimeout(() => {\n      overlay.classList.add('fade');\n      overlay.addEventListener('animationend', () => {\n        overlay.classList.remove('active');\n        form.reset();\n      });\n    }, 200);\n  });\n}\n\nfunction minDate() {\n  const dtToday = new Date();\n\n  let month = dtToday.getMonth() + 1;\n  let day = dtToday.getDate();\n  let year = dtToday.getFullYear();\n  if (month < 10) month = '0' + month.toString();\n  if (day < 10) day = '0' + day.toString();\n\n  const minDate = year + '-' + month + '-' + day;\n\n  const datePicker = document.querySelectorAll(`input[type='date']`);\n\n  datePicker.forEach(date => {\n    date.setAttribute('min', minDate);\n  });\n}\n\nfunction manageOverlay() {\n  const overlay = document.querySelector('.overlay');\n\n  function openOverlay() {\n    overlay.classList.add('active');\n    overlay.classList.remove('fade');\n  }\n\n  function closeOverlay(el) {\n    overlay.addEventListener('click', () => {\n      el.classList.remove('active');\n      setTimeout(() => {\n        overlay.classList.add('fade');\n        overlay.addEventListener('animationend', () => {\n          overlay.classList.remove('active');\n        });\n      }, 200);\n    });\n  }\n\n  return { openOverlay, closeOverlay };\n}\n\nfunction WarningModal() {\n  const warningModal = document.querySelector('.warning-modal');\n  const overlay = document.querySelector('.overlay');\n\n  closeWarningModal();\n\n  function openWarningModal() {\n    warningModal.classList.add('active');\n    manageOverlay().openOverlay();\n  }\n\n  function closeWarningIfYes() {\n    warningModal.classList.remove('active');\n    setTimeout(() => {\n      overlay.classList.add('fade');\n      overlay.addEventListener('animationend', () => {\n        overlay.classList.remove('active');\n      });\n    }, 200);\n  }\n\n  function closeWarningModal() {\n    const delNo = document.querySelector('.delNo');\n    manageOverlay().closeOverlay(warningModal);\n\n    delNo.addEventListener('click', () => {\n      warningModal.classList.remove('active');\n      setTimeout(() => {\n        overlay.classList.add('fade');\n        overlay.addEventListener('animationend', () => {\n          overlay.classList.remove('active');\n        });\n      }, 200);\n    });\n  }\n\n  return { openWarningModal, closeWarningIfYes };\n}\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/getModal.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UI */ \"./src/UI.js\");\n/* harmony import */ var _getModal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getModal */ \"./src/getModal.js\");\n/* harmony import */ var _functionality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functionality */ \"./src/functionality.js\");\n\n\n\n\n(0,_functionality__WEBPACK_IMPORTED_MODULE_2__.tasksFunctionality)();\n(0,_functionality__WEBPACK_IMPORTED_MODULE_2__.projectFunctionality)();\n\n(0,_UI__WEBPACK_IMPORTED_MODULE_0__.changeToDoPages)();\n(0,_UI__WEBPACK_IMPORTED_MODULE_0__.menuToggle)();\n\n(0,_getModal__WEBPACK_IMPORTED_MODULE_1__.TasksModal)();\n(0,_getModal__WEBPACK_IMPORTED_MODULE_1__.ProjectsModal)();\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/project.js":
/*!************************!*\
  !*** ./src/project.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Project)\n/* harmony export */ });\n// Project class\n\nclass Project {\n  constructor(name, current) {\n    this._name = name;\n    this._projectTasks = [];\n    this._current = current || false;\n    this._Id = makeID();\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    if (value) {\n      this._name = value;\n    }\n  }\n\n  get projectTasks() {\n    return this._projectTasks;\n  }\n\n  set projectTasks(value) {\n    if (value) {\n      this._projectTasks.push(value);\n    }\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  set current(value) {\n    if (value) {\n      this._current = value;\n    }\n  }\n\n  get id() {\n    return this._Id;\n  }\n\n  set id(value) {\n    if (value) {\n      this._Id = value;\n    }\n  }\n}\n\nfunction makeID() {\n  return '_' + Math.floor(Math.random() * 1000000) + 1;\n}\n\n\n//# sourceURL=webpack://todo-list/./src/project.js?");

/***/ }),

/***/ "./src/task.js":
/*!*********************!*\
  !*** ./src/task.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Task)\n/* harmony export */ });\n// Task class\n\nclass Task {\n  constructor(name, dueDate, priority, project, desc) {\n    this._name = name;\n    this._dueDate = dueDate;\n    this._priority = priority;\n    this._project = project;\n    this._desc = desc;\n    this._Id = makeID();\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    if (value) {\n      this._name = value;\n    }\n  }\n\n  get dueDate() {\n    return this._dueDate;\n  }\n\n  set dueDate(value) {\n    if (value) {\n      this._dueDate = value;\n    }\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(value) {\n    if (value) {\n      this._priority = value;\n    }\n  }\n\n  get project() {\n    return this._project;\n  }\n\n  set project(value) {\n    if (value) {\n      this._project = value;\n    }\n  }\n\n  get description() {\n    return this._desc;\n  }\n\n  set description(value) {\n    if (value) {\n      this._desc = value;\n    }\n  }\n\n  get Id() {\n    return this._Id;\n  }\n}\n\nfunction makeID() {\n  return '_' + Math.floor(Math.random() * 1000000) + 1;\n}\n\n\n//# sourceURL=webpack://todo-list/./src/task.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;